1. State of the Art Parser

Both the Stanford and Berkeley parsers seemed to be fooled by the sentence,

"Why did you bring that table that the book was on up?"

which contains center embedding and ends in two prepositions. They both parsed
the sentence in the following way.

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (VBD did)
      (NP (PRP you))
      (VP (VB bring)
        (NP
          (NP (DT that) (NN table))
          (SBAR (IN that)
            (S
              (NP (DT the) (NN book))
              (VP (VBD was)
                (ADVP (RB on) (RB up))))))))
    (. ?)))

Clearly, however, "on up" is not an adverb phrase in this context, but rather
on was a preposition refering to the table.

Interestingly, the sentence,

"Is he okay, the person that fell?"

was parsed incorrectly by the Stanford parser, but parsed correctly by the
Berkeley parser. The Stanford parser produced,

(ROOT
  (SQ (VBZ Is)
    (NP (PRP he))
    (NP
      (NP
        (NP (NNP okay))
        (, ,)
        (NP (DT the) (NN person)))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBD fell)))))
    (. ?)))

which is incorrect in that "okay, person that fell" is not a noun phrase. The
Berkeley parser produced,

(ROOT
  (SQ (VBZ Is)
    (NP (PRP he))
    (ADJP (JJ okay))
    (, ,)
    (NP
      (NP (DT the) (NN person))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBD fell)))))
    (. ?)))

which seems to us to be the correct parse. Similarly, the Stanford parser
parsed the reverse sentence, 

"The person that fell, is he okay?"

incorrectly as well, while the Berkeley parser parsed correctly. Stanford's output was 

(ROOT
  (SQ
    (S
      (NP
        (NP (DT The) (NN person))
        (NP (DT that)))
      (VP (VBD fell)))
    (, ,)
    (SQ (VBZ is)
      (NP (PRP he))
      (ADJP (JJ okay)))
    (. ?)))

which is incorrect because "The person that" is not a noun phrase. Berkeley,
however, correctly identified the that clause with the following parse.

(ROOT
  (S
    (NP
      (NP (DT The) (NN person))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBD fell)))))
    (, ,)
    (SQ (VBZ is)
      (NP (PRP he))
      (ADJP (JJ okay))
      (. ?))))

Again quite interestingly, the sentence 

"A photo tour of one of the largest arcades in the world!"

grabbed from a Reddit post title is correctly identified as a fragment by the
Berkeley parser.

(ROOT
  (FRAG
    (NP
      (NP (DT A) (JJ photo) (NN tour))
      (PP (IN of)
        (NP
          (NP (CD one))
          (PP (IN of)
            (NP
              (NP (DT the) (JJS largest) (NNS arcades))
              (PP (IN in)
                (NP (DT the) (NN world))))))))
    (. !)))

I've never thought about how something looks like. 
vs
I've never thought about how something looks. 

Also words like "gimme" don't seem to fool the parser.

2.

(a)
We are able to ensure that our algorithm is within the given time and space
constraints by making sure that we use the correct datastructures for quick
lookup times. We use a hash table as a set to determine if a "state" or entry
is already in a particular column.

(b)
Adding to the column is simply an append on a Python list and an insertion into
a Python dictionary, both of which are O(1).

(c)
Before adding a new state or entry to a column we always check if that state is
already present. If it is already present, but has a lower weight change the
weight and backpointers of the state already in the column.

We are able to handle very general rules with this parser through careful design.
For example NP â†’ NP . and NP causes us no problem because we make no assumptions
about the nature of each symbol on the right hand side. We simply march the dot
over to the right as we complete or scan constituents. To that end we consider
all terminal symbols like "and" as "free" or having zero weight and nonterminals
as having the weight of all of the rules that were used to make them.

We do in fact have the allowable bug. We did not have time to find a proper work
around for that bug.

Please see "parse.py" for more details.


